OUTPUT_FORMAT(elf32-i386)
OUTPUT_ARCH(i386)

MEMORY
{
	mem :    ORIGIN = 64M,    LENGTH = 64M
}

PHDRS
{
	reset PT_LOAD FILEHDR PHDRS ;
	excep PT_LOAD ;
	text PT_LOAD ;
	data PT_LOAD ;
	heap PT_NULL ;
	stack PT_NULL ;
	debug PT_NULL ;
	bss PT_LOAD ;
}

/*  Initial Load Address;
 *  This is where we start loading the simulator binary.
 */
BASE_ADDR  = 0x04000000;

/* Stack and Heap Sizes */
STACK_SIZE = 0x10000;        /* 64 KiB */
HEAP_SIZE  = 0x1000000;      /* 16 MiB */

SECTIONS
{
    . = BASE_ADDR;

    .init ALIGN(16): { stext = .; *(.init) } > mem :text

    .text ALIGN(8): {
        *(.text) *(.text.*)
    } > mem :text

    .fini ALIGN(8): { *(.fini*) } > mem :text
    
    .data ALIGN(4K) : {
        *(.data) *(.glue_7*) *(.eh_frame*)
    } > mem :data

    .hal ALIGN(0x8): {
        PLATFORM_DEBUG_CHARPORT = .; LONG(0xC0000000)

        CPU_BSS_START    = .; LONG(__bss_start)
        CPU_BSS_END      = .; LONG(__bss_end)

        CPU_STACK_START  = .; LONG(__stack_start)
        CPU_STACK_END    = .; LONG(__stack_end)

        CPU_HEAP_START   = .; LONG(__heap_start)
        CPU_HEAP_END     = .; LONG(__heap_end)

        PLATFORM_TIMER_INTN = .; LONG (2)
        PLATFORM_TIMER_BASE = .; LONG(0xC1000000)

        PLATFORM_IPI_INTN = .; LONG(7)
        PLATFORM_IPI_BASE = .; LONG(0xC2000000)

        SOCLIB_TTY_NDEV = .; LONG(0x1)
        SOCLIB_TTY_DEVICES = .; LONG(3) LONG(0XC0000000)

        /* Important: In SystemC Framebuffer Component the base address will be 0XC4000000 */
        SOCLIB_FB_NDEV = .; LONG(0x1)
        SOCLIB_FB_DEVICES = .; LONG(256) LONG(144) LONG(0XC4001000)

        SOCLIB_BLOCK_DEVICES_NDEV = .; LONG(0x3)
        SOCLIB_BLOCK_DEVICES = .; LONG(0) LONG(0) LONG(0xC6000000) LONG(0) LONG(0) LONG(0xC6500000) LONG(0) LONG(0) LONG(0xC6A00000)

        SOCLIB_FDACCESS_NDEV = .; LONG(0x1)
        SOCLIB_FDACCESS_DEVICES = .; LONG(2) LONG(5) LONG(0xC3000000)

        CHANNEL_RDV_NDEV = .; LONG(24);

        PLATFORM_AICU_BASE = .; LONG(0x0) LONG(0x0) LONG(0x0) LONG(0x0) LONG(0x0) LONG(0x0) LONG(0x0) LONG(0x0)

        EXTFIFO_CHANNEL_NDEV = .; LONG(0x0)
        EXTFIFO_CHANNELS_PTR = .; LONG(0x0)

        HOSTTIME_BASEPORT    = .; SHORT(0x5000)
	} > mem :data

    .rodata ALIGN(16): {
        *(.rodata) *(.rodata.str1.*) *(.rodata.cst*) *(.rodata.str2.*)
    } > mem :data

    .bss ALIGN(16): {
        __bss_start = .;
        *(.bss) *(.bss.*) *(.rel*) *(COMMON)
        __bss_end = .;
    } > mem :bss

    .stack ALIGN(16): {
        __stack_end = .;
        . += STACK_SIZE;
        __stack_start = .;
    } > mem :stack

    .heap ALIGN(16): {
        __heap_start = .;
        . += HEAP_SIZE;
        __heap_end = .;
    } > mem :heap

    _end = .; __end = .;

    /DISCARD/ : { *(.note) *(.note.gnu.build-id) *(.comment) *(.note.ABI-tag) *(.gnu.version) *(.gnu.version_r)}
}

